procedure PonerUnaDeCada()
{
    /*
        PROPÓSITO
            Poner una bolita de cada color en la celda actual.
        PRECONDICIONES
            Ninguna.
    */

    Poner(Verde)
    Poner(Negro)
    Poner(Rojo)
    Poner(Azul)
}

procedure SacarUnaDeCada()
{
    /*
        PROPÓSITO
            Saca una bolita de cada color en la celda actual.
        PRECONDICIONES
            Debe haber al menos una bolita de cada color en la celda actual.
    */

    Sacar(Verde)
    Sacar(Negro)
    Sacar(Rojo)
    Sacar(Azul)
}

procedure Poner_DeColor_(cantidad, color)
{
    /*
        PROPÓSITO
            Pone **cantidad** bolitas de color **color** en la celda actual.
        PRECONDICIONES
            Ninguna.
        PARÁMETROS
            "cantidad": -Entero- Cantidad de bolitas.
            "color": -Color- Color de bolitas.
    */

    repeat(cantidad)
    {
        Poner(color)
    }
}

procedure Sacar_DeColor_(cantidad, color)
{
    /*
        PROPÓSITO
            Saca **cantidad** bolitas de color **color** en la celda actual.
        PRECONDICIONES
            Deben existir al menos **cantidad** bolitas de color **color** en la celda actual.
        PARÁMETROS
            "cantidad": -Entero- Cantidad de bolitas.
            "color": -Color- Color de bolitas.
    */

    repeat(cantidad)
    {
        Sacar(color)
    }
}

procedure SacarTodasDeColor_(color)
{
    /*
        PROPÓSITO:
            Saca todas las bolitas de color **color** de la celda actual.
        PRECONDICIONES:
            * Ninguna
        PARÁMETROS:
            "color": Color - Color a sacar.
    */

    Sacar_DeColor_(nroBolitas(color), color)
}


procedure Mover_VecesAl_(cantidad, dirección)
{
    /*
        PROPÓSITO:
            * Mueve el cabezal **cantidad** veces en dirección **dirección**
        PRECONDICIONES
            * Deben existir **cantidad** celdas lindantes al **dirección** de la celda actual.
        PARÁMETROS
            "cantidad": -Entero- Cantidad de veces a mover el cabezal.
            "dirección": -Dirección- Dirección a mover el cabezal.
    */

    repeat(cantidad)
    {
        Mover(dirección)
    }
}

procedure Mover_SiPuede(dirección)
{
    /*
    PROPÓSITO: 
        Mueve el cabezal una celda en dirección **dirección**,
        sólo si le es posible hacerlo, caso contrario se queda
        en la celda actual.
    PRECONDICIONES:
        * Ninguna
    PARÁMETROS:
        "dirección": Dirección - La dirección hacia la cual mover.
    */
    
    if (puedeMover(dirección))
    {
        Mover(dirección)
    }
}

procedure Poner_Distanciado_EnDirección_DeColor_(cantidad, distancia, dirección, color)
{
    /*
        PROPÓSITO:
            * Pone una bolita de color **color** a **distancia** celdas desde la celda actual en dirección **dirección**, manteniendo la posición inicial del cabezal.
            * Deben existir **distancia** celdas lindantes al **dirección** de la celda actual.
            * La celda ubicada a **distancia** posiciones en dirección al **dirección** debe estar vacía.
        PRECONDICIONES:
            * 
        PARÁMETROS
            "distancia": -Entero- Distancia a poner la bolita.
            "dirección": -Dirección- Dirección a poner la bolita.
            "color": -Color- Color de la bolita.
    */

    MoverCabezal_EnDirección_(distancia, dirección)
    Poner_DeColor_(cantidad, color)
    MoverCabezal_EnDirección_(distancia, -dirección)
}

// /!\ FALTA PROBAR EL PROCEDIMIENTO
procedure DibujarLínea_HaciaEl_DeLargo_(color, dirección, largo)
{
    /*
        PROPÓSITO:
            Dibuja una línea de longitud **largoDeLaLínea** en dirección **dirección**, dejando el cabezal en la posición inicial.
        PRECONDICIONES:
            * La celda actual está vacía y debe haber al menos **largoDeLaLínea** celdas
            en dirección dirección.
        PARÁMETROS:
            "largoDeLaLínea": Número - La longitud de la línea que se dibuja
            "dirección": Dirección - La dirección hacia la que se dibuja la línea
    */

    repeat(largo)
    {
        Poner(color)
        Mover(dirección)
    }
}
